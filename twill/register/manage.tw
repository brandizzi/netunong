#!/usr/bin/env DJANGO_SETTINGS_MODULE=settings twill-sh
################################################################################
#########   SETUP                                                    ###########
################################################################################
runfile twill/strict-html.twi
# Creating entities
extend_with 'register.test.test_utilities'
run 'organization, project = get_organization_project()'
run 'employee = get_employee(organization=organization)'
run 'task1 = Task(name="Test login screen", project=project, description="Testing the login screen")'
run 'task1.save()'
run 'task2 = Task(name="Test index screen", project=project, description="Testing the index screen")'
run 'task2.save()'
run 'employee.tasks.add(task1, task2)'

runfile twill/login.twi
code 200
notfind '<ul class="errorlist">'

################################################################################
#########   VERIFY BASIC NAVIGATION                                  ###########
################################################################################
# FIRST RELEVANT POINT: should have link for management page...
find '<a +name="manage" +href="/netunong/register/manage/"' 
follow manage
# ...and link for register page
find '<a +name="register" +href="/netunong/register/"' 

################################################################################
#########   VERIFY PERIOD REGISTRATION                               ###########
################################################################################
follow register
code 200
notfind '<ul class="errorlist">'
# Starts a new working period
fv 1 intention 'write FIRST twill test'
fv 1 task ${str(task1.id)}
submit
code 200
notfind '<ul class="errorlist">'
run 'wp = employee.last_working_period'

follow manage
extend_with django.utils.dateformat
extend_with django.conf
find 'name="working_period" value="${str(wp.id)}"'
find 'value="${wp.intended}"'
# There is no sense in validating the task, since all tasks are listed
# TODO find a way to validate task
#find '${task1.name}'
#find 'value="${str(task1.id)}"'
find 'value="${DateFormat(wp.start).format(settings.DATE_FORMAT)}"'
find 'value="${DateFormat(wp.start).format(settings.TIME_FORMAT)}"'

################################################################################
#########   VERIFY PERIOD CLOSING                                    ###########
################################################################################
follow register
code 200
notfind '<ul class="errorlist">'
# Close period
fv 1 execution 'write another Twill test'
fv 1 task ${str(task2.id)}
submit
code 200
notfind '<ul class="errorlist">'
run 'wp = employee.last_working_period'

follow manage
find 'name="working_period" value="${str(wp.id)}"'
find '${wp.executed}' # The intended activity is not presented anymore
# There is no sense in validating the task, since all tasks are listed
# TODO find a way to validate task
#find '${task2.name}'
#find '${str(task2.id)}'
find '${DateFormat(wp.start).format(settings.DATE_FORMAT)}'
find '${DateFormat(wp.start).format(settings.TIME_FORMAT)}'
find '${DateFormat(wp.end).format(settings.DATE_FORMAT)}'
find '${DateFormat(wp.end).format(settings.TIME_FORMAT)}'
# Validating the period total time. For now, a dull validation, since the
# start and end of the periods are very close:
run 'secs = wp.timedelta.seconds'
# Funny thing: cannot escape parenthesis
find '${str(wp.total_time)} .${str(secs/(60*60))}h${str(secs/60)}.'


################################################################################
#########   VERIFYING AGAIN                                          ###########
################################################################################
follow register
code 200
notfind '<ul class="errorlist">'
# Starts a new working period
fv 1 intention 'write SECOND twill test'
fv 1 task ${str(task2.id)}
submit
code 200
notfind '<ul class="errorlist">'
run 'wp = employee.last_working_period'

follow manage
find 'name="working_period" value="${str(wp.id)}"'
find 'value="${wp.intended}"'
# There is no sense in validating the task, since all tasks are listed
# TODO find a way to validate task
#find '${task1.name}'
#find 'value="${str(task2.id)}"'
find 'value="${DateFormat(wp.start).format(settings.DATE_FORMAT)}"'
find 'value="${DateFormat(wp.start).format(settings.TIME_FORMAT)}"'

follow register
code 200
notfind '<ul class="errorlist">'
# Close period
fv 1 execution 'write another SECOND Twill test'
fv 1 task ${str(task1.id)}
submit
code 200
notfind '<ul class="errorlist">'
run 'wp = employee.last_working_period'

follow manage
find 'name="working_period" value="${str(wp.id)}"'
find '${wp.executed}' # The intended activity is not presented anymore
# There is no sense in validating the task, since all tasks are listed
# TODO find a way to validate task
#find '${task2.name}'
#find '${str(task2.id)}'
find '${DateFormat(wp.start).format(settings.DATE_FORMAT)}'
find '${DateFormat(wp.start).format(settings.TIME_FORMAT)}'
find '${DateFormat(wp.end).format(settings.DATE_FORMAT)}'
find '${DateFormat(wp.end).format(settings.TIME_FORMAT)}'
# Validating the period total time. For now, a dull validation, since the
# start and end of the periods are very close:
run 'secs = wp.timedelta.seconds'
find '${str(wp.total_time)} .${str(secs/(60*60))}h${str((secs%3600)/60)}.'

# Clean up
#runfile twill/clean.twi


#!/usr/bin/env DJANGO_SETTINGS_MODULE=settings twill-sh
################################################################################
#########   SETUP                                                    ###########
################################################################################
runfile twill/strict-html.twi
# Creating entities
extend_with 'register.test.test_utilities'
run 'organization, project = get_organization_project()'
run 'employee = get_employee(organization=organization)'
run 'task1 = Task(name="Test login screen", project=project, description="Testing the login screen")'
run 'task1.save()'
run 'task2 = Task(name="Test index screen", project=project, description="Testing the index screen")'
run 'task2.save()'
run 'employee.tasks.add(task1, task2)'

runfile twill/login.twi
code 200
notfind '<ul class="errorlist">'

################################################################################
#########   VERIFY BASIC NAVIGATION                                  ###########
################################################################################
# FIRST RELEVANT POINT: should have link for management page...
find '<a +name="manage" +href="/netunong/register/manage/"' 
follow manage
# ...and link for register page
find '<a +name="register" +href="/netunong/register/"' 

################################################################################
#########   VERIFY PERIOD REGISTRATION                               ###########
################################################################################
follow register
code 200
notfind '<ul class="errorlist">'
# Starts a new working period
fv 1 intention 'write FIRST twill test'
fv 1 task ${str(task1.id)}
submit
code 200
notfind '<ul class="errorlist">'
run 'wp = employee.last_working_period'

follow manage
extend_with django.utils.dateformat
extend_with django.conf
find 'name="working_period" value="${str(wp.id)}"'
find 'value="${wp.intended}"'
# There is no sense in validating the task, since all tasks are listed
# TODO find a way to validate task
#find '${task1.name}'
#find 'value="${str(task1.id)}"'

find 'value="${wp.start.strftime(settings.NETUNONG_DATE_FORMAT)}"'
find 'value="${wp.start.strftime(settings.NETUNONG_TIME_FORMAT)}"'

################################################################################
#########   VERIFY PERIOD CLOSING                                    ###########
################################################################################
follow register
code 200
notfind '<ul class="errorlist">'
# Close period
fv 1 execution 'write another Twill test'
fv 1 task ${str(task2.id)}
submit
code 200
notfind '<ul class="errorlist">'
run 'wp = employee.last_working_period'

follow manage
find 'name="working_period" value="${str(wp.id)}"'
find '${wp.executed}'
notfind '${wp.intended}' # The intended activity is not presented anymore
# There is no sense in validating the task, since all tasks are listed
# TODO find a way to validate task
#find '${task2.name}'
#find '${str(task2.id)}'
find '${wp.start.strftime(settings.NETUNONG_DATE_FORMAT)}'
find '${wp.start.strftime(settings.NETUNONG_TIME_FORMAT)}'
find '${wp.end.strftime(settings.NETUNONG_DATE_FORMAT)}'
find '${wp.end.strftime(settings.NETUNONG_TIME_FORMAT)}'
# Validating the period total time. For now, a dull validation, since the
# start and end of the periods are very close:
run 'secs = wp.timedelta.seconds'
# Funny thing: cannot escape parenthesis
find '${str(wp.total_time)} .${str(secs/(60*60))}h${str(secs/60)}.'


################################################################################
#########   VERIFYING AGAIN                                          ###########
################################################################################
follow register
code 200
notfind '<ul class="errorlist">'
# Starts a new working period
fv 1 intention 'write SECOND twill test'
fv 1 task ${str(task2.id)}
submit
code 200
notfind '<ul class="errorlist">'
run 'wp = employee.last_working_period'

follow manage
find 'name="working_period" value="${str(wp.id)}"'
find 'value="${wp.intended}"'
# There is no sense in validating the task, since all tasks are listed
# TODO find a way to validate task
#find '${task1.name}'
#find 'value="${str(task2.id)}"'
find 'value="${wp.start.strftime(settings.NETUNONG_DATE_FORMAT)}"'
find 'value="${wp.start.strftime(settings.NETUNONG_TIME_FORMAT)}"'

follow register
code 200
notfind '<ul class="errorlist">'
# Close period
fv 1 execution 'write another SECOND Twill test'
fv 1 task ${str(task1.id)}
submit
code 200
notfind '<ul class="errorlist">'
run 'wp = employee.last_working_period'

follow manage
find 'name="working_period" value="${str(wp.id)}"'
find '${wp.executed}' # The intended activity is not presented anymore
# There is no sense in validating the task, since all tasks are listed
# TODO find a way to validate task
#find '${task2.name}'
#find '${str(task2.id)}'
find '${wp.start.strftime(settings.NETUNONG_DATE_FORMAT)}'
find '${wp.start.strftime(settings.NETUNONG_TIME_FORMAT)}'
find '${wp.end.strftime(settings.NETUNONG_DATE_FORMAT)}'
find '${wp.end.strftime(settings.NETUNONG_TIME_FORMAT)}'
# Validating the period total time. For now, a dull validation, since the
# start and end of the periods are very close:
run 'secs = wp.timedelta.seconds'
find '${str(wp.total_time)} .${str(secs/(60*60))}h${str((secs%3600)/60)}.'

################################################################################
#########   UPDATING REGISTRATION                                    ###########
################################################################################
extend_with datetime
run 'wp1, wp2 = employee.workingperiod_set.all()'
run 'st, et = wp1.start.time(), wp1.end.time()'
fv form-wp${str(wp1.id)} activity 'write just a Twill test'
fv form-wp${str(wp1.id)} task '${str(task1.id)}'
run 'newdate = datetime.now()+timedelta(3)'
fv form-wp${str(wp1.id)} start-date '${newdate.strftime(settings.NETUNONG_DATE_FORMAT)}'
fv form-wp${str(wp1.id)} end-date '${newdate.strftime(settings.NETUNONG_DATE_FORMAT)}'
submit submit${str(wp1.id)}
code 200
# wp1 should change date, but not time (that is, the hour and minutes cannot be
# changed).
run 'wp1 = WorkingPeriod.objects.get(id=${str(wp1.id)})'
run 'assert wp1.executed == "write just a Twill test", "The value was %s" % wp1.executed'
find 'value="${wp1.executed}"'
run 'assert wp1.executed_task == task1'
run 'assert wp1.start.date() == newdate.date()'
run 'assert wp1.end.date() == newdate.date()'
run 'assert wp1.start.time().hour == st.hour'
run 'assert wp1.end.time().minute == et.minute'

find '${newdate.strftime(settings.NETUNONG_DATE_FORMAT)}'

run 'sd, ed = wp2.start.date(), wp2.end.date()'
fv form-wp${str(wp2.id)} activity 'test hours with a Twill test'
fv form-wp${str(wp2.id)} task '${str(task2.id)}'
run 'newdate = wp2.start+timedelta(0, 60*60*2+30*60)' # 2h30
fv form-wp${str(wp2.id)} start-time '${newdate.strftime(settings.NETUNONG_TIME_FORMAT)}'
fv form-wp${str(wp2.id)} end-time '${newdate.strftime(settings.NETUNONG_TIME_FORMAT)}'
submit submit${str(wp2.id)}
code 200
# Now we change time and date should stay unaltered
run 'wp2 = WorkingPeriod.objects.get(id=${str(wp2.id)})'
run 'assert wp2.executed == "test hours with a Twill test", "The value was %s" % wp2.executed'
find 'value="${wp2.executed}"'
run 'assert wp2.executed_task == task2, "no %s; Task found: %s" % (wp.intended_task, wp.executed_task)'
run 'assert wp2.start.date() == sd'
run 'assert wp2.end.date() == ed'
run 'assert wp2.start.time().hour == newdate.hour'
run 'assert wp2.end.time().minute == newdate.minute'

find '${newdate.strftime(settings.NETUNONG_TIME_FORMAT)}'

################################################################################
#########   SELECTING NO TASK                                        ###########
################################################################################
fv form-wp${str(wp1.id)} task '0'
submit submit${str(wp1.id)}
code 200

run 'wp1 = WorkingPeriod.objects.get(id=${str(wp1.id)})'
run 'assert wp1.executed_task is None'

################################################################################
#########   DELETING A WORKING PERIOD                                ###########
################################################################################
# Does nothing, it is just for selecting the form
fv form-wp${str(wp1.id)} activity ''
submit delete${str(wp1.id)}
code 200

# Should appear nor in the screen neither in database
notfind '${wp1.executed}'
run 'assert wp1 not in WorkingPeriod.objects.all()'

################################################################################
#########   ALTERING INCOMPLETE PERIOD: ACTIVITY                     ###########
################################################################################
follow register
# Starts a new working period
fv 1 intention 'Testing altering incomplete period'
fv 1 task ${str(task1.id)}
submit
code 200
notfind '<ul class="errorlist">'
run 'wp = employee.last_working_period'
run 'assert wp.intended == "Testing altering incomplete period"'

follow manage
find ${wp.intended}
fv form-wp${str(wp.id)} activity 'Altered a incomplete period'
submit submit${str(wp.id)}
code 200
# Find again
run 'wp = employee.last_working_period'
notfind ${wp.intended}
find ${wp.executed}
# Do not change intended
run 'assert wp.intended == "Testing altering incomplete period"'

# Clean up
runfile twill/clean.twi


################################################################################
#########   VERIFYING AGAIN                                          ###########
################################################################################
follow register
code 200
notfind '<ul class="errorlist">'
# Starts a new working period
fv 1 intention 'write SECOND twill test'
fv 1 task ${str(taskid2)}
submit
code 200
notfind '<ul class="errorlist">'
run 'employee = Employee.objects.all()[0]'
run 'wp = employee.last_working_period'

follow manage
find 'name="working_period" value="${str(wp.id)}"'
find 'value="${wp.intended}"'
# There is no sense in validating the task, since all tasks are listed
# TODO find a way to validate task
#find '${taskname1}'
#find 'value="${str(taskid2)}"'
find 'value="${wp.start.strftime(settings.NETUNONG_DATE_FORMAT)}"'
find 'value="${wp.start.strftime(settings.NETUNONG_TIME_FORMAT)}"'

follow register
code 200
notfind '<ul class="errorlist">'
# Close period
fv 1 execution 'write another SECOND Twill test'
fv 1 task ${str(taskid1)}
submit
code 200
notfind '<ul class="errorlist">'
run 'wp = employee.last_working_period'

follow manage
find 'name="working_period" value="${str(wp.id)}"'
find '${wp.executed}' # The intended activity is not presented anymore
# There is no sense in validating the task, since all tasks are listed
# TODO find a way to validate task
#find '${taskname2}'
#find '${str(taskid2)}'
find '${wp.start.strftime(settings.NETUNONG_DATE_FORMAT)}'
find '${wp.start.strftime(settings.NETUNONG_TIME_FORMAT)}'
find '${wp.end.strftime(settings.NETUNONG_DATE_FORMAT)}'
find '${wp.end.strftime(settings.NETUNONG_TIME_FORMAT)}'
# Validating the period total time. For now, a dull validation, since the
# start and end of the periods are very close:
run 'secs = wp.timedelta.seconds'
find '${str(wp.total_time)} .${str(secs/(60*60))}h${str((secs%3600)/60)}.'

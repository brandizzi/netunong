################################################################################
#########   UPDATING REGISTRATION                                    ###########
################################################################################

extend_with datetime
run 'employee = Employee.objects.all()[0]'
run 'task1, task2 = Task.objects.all()' 
run 'wp1, wp2 = employee.workingperiod_set.all()'
echo ${str(wp1.id)}
run 'st, et = wp1.start.time(), wp1.end.time()'
fv form-wp activity${str(wp1.id)} 'write just a Twill test'
fv form-wp task${str(wp1.id)} '${str(taskid1)}'
run 'newdate = datetime.now()+timedelta(3)'
fv form-wp start-date${str(wp1.id)} '${newdate.strftime(settings.NETUNONG_DATE_FORMAT)}'
fv form-wp end-date${str(wp1.id)} '${newdate.strftime(settings.NETUNONG_DATE_FORMAT)}'
submit update${str(wp1.id)}
code 200
find '<li class="success">'
# wp1 should change date, but not time (that is, the hour and minutes cannot be
# changed).
run 'wp1 = WorkingPeriod.objects.get(id=${str(wp1.id)})'
run 'assert wp1.executed == "write just a Twill test", "The value was %s" % wp1.executed'
find 'value="${wp1.executed}"'
run 'assert wp1.executed_task == task1'
run 'assert wp1.start.date() == newdate.date()'
run 'assert wp1.end.date() == newdate.date()'
run 'assert wp1.start.time().hour == st.hour'
run 'assert wp1.end.time().minute == et.minute'

find '${newdate.strftime(settings.NETUNONG_DATE_FORMAT)}'

run 'sd, ed = wp2.start.date(), wp2.end.date()'
fv form-wp activity${str(wp2.id)} 'test hours with a Twill test'
fv form-wp task${str(wp2.id)} '${str(taskid2)}'
run 'newdate = wp2.start+timedelta(0, 60*60*2+30*60)' # 2h30
fv form-wp start-time${str(wp2.id)} '${newdate.strftime(settings.NETUNONG_TIME_FORMAT)}'
fv form-wp end-time${str(wp2.id)} '${newdate.strftime(settings.NETUNONG_TIME_FORMAT)}'
submit update${str(wp2.id)}
code 200
find '<li class="success">'
# Now we change time and date should stay unaltered
run 'wp2 = WorkingPeriod.objects.get(id=${str(wp2.id)})'
run 'assert wp2.executed == "test hours with a Twill test", "The value was %s" % wp2.executed'
find 'value="${wp2.executed}"'
run 'assert wp2.executed_task == task2, "no %s; Task found: %s" % (wp.intended_task, wp.executed_task)'
run 'assert wp2.start.date() == sd'
run 'assert wp2.end.date() == ed'
run 'assert wp2.start.time().hour == newdate.hour'
run 'assert wp2.end.time().minute == newdate.minute'

find '${newdate.strftime(settings.NETUNONG_TIME_FORMAT)}'
